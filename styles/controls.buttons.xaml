<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
  <Style x:Key="MetroFlatButton" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource FlatButtonBackgroundBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource FlatButtonForegroundBrush}" />
    <Setter Property="Control.FontSize" Value="{DynamicResource FlatButtonFontSize}" />
    <Setter Property="Control.Padding" Value="10,5,10,5" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Border" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="0" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Value="{DynamicResource FlatButtonPressedBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource FlatButtonPressedForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource GrayBrush2}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="Control.Background" Value="#FFA9A9A9" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroCircleButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Control}">
          <Ellipse Margin="8" Stroke="{DynamicResource BlackBrush}" StrokeDashArray="2 2" StrokeThickness="1" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroCircleButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource MetroCircleButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush3}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Ellipse Fill="{TemplateBinding Control.Background}" Margin="4" StrokeThickness="0" />
            <Ellipse Name="ellipsebg" Fill="{DynamicResource BlackBrush}" Opacity="0" Margin="4" StrokeThickness="0" />
            <Ellipse Name="ellipse" Margin="4" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
            <ContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="0.3" Duration="0:0:0" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.7" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource GrayBrush7}" Property="Control.Foreground" />
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ChromelessButtonTemplate" TargetType="{x:Type ButtonBase}">
    <Grid Background="{TemplateBinding Control.Background}">
      <ContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="True" Opacity="0.75" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="1" />
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="False">
        <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value=".5" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="#FFADADAD" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ChromelessButtonStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template" Value="{StaticResource ChromelessButtonTemplate}" />
  </Style>
  <Style x:Key="BaseMetroWindowButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" Opacity="0.5" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SemiTransparentWhiteBrush}" />
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundDisabledBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroBaseWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseMetroWindowButtonStyle}" />
  <Style x:Key="MetroWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MetroBaseWindowButtonStyle}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.Width" Value="34" />
    <Setter Property="FrameworkElement.MaxHeight" Value="34" />
    <Setter Property="Control.Padding" Value="0" />
  </Style>
  <Style x:Key="LightMetroWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseMetroWindowButtonStyle}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.Width" Value="34" />
    <Setter Property="FrameworkElement.MaxHeight" Value="34" />
    <Setter Property="Control.Padding" Value="0" />
  </Style>
  <Style x:Key="DarkMetroWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource LightMetroWindowButtonStyle}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SemiTransparentGreyBrush}" />
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Foreground" Value="#FFFFFFFF" />
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DarkIdealForegroundDisabledBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroButton" TargetType="{x:Type Button}">
    <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Upper" />
    <Setter Property="Controls:ControlsHelper.CornerRadius" Value="3" />
    <Setter Property="FrameworkElement.MinHeight" Value="25" />
    <Setter Property="Control.FontWeight" Value="Bold" />
    <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}" />
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}" />
    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush10}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.Padding" Value="5,6" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Name="Background" Background="{TemplateBinding Control.Background}" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Border Name="Border" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Border Name="DisabledVisualElement" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush8}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush7}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="2" />
              <Setter TargetName="Border" Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="DisabledVisualElement" Property="UIElement.Opacity" Value="0.7" />
              <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SquareButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Lower" />
    <Setter Property="FrameworkElement.MinHeight" Value="25" />
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}" />
    <Setter Property="Control.FontWeight" Value="SemiBold" />
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.Padding" Value="5,6" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Control.Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidFocused" />
                <VisualState x:Name="InvalidUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Name="Background" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}" />
            <Rectangle Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" />
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource GrayBrush8}" Property="Control.Background" />
              <Setter Value="{DynamicResource BlackBrush}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Value="{DynamicResource BlackBrush}" Property="Control.Background" />
              <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AccentedSquareButtonStyle" BasedOn="{StaticResource SquareButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
  </Style>
  <Style x:Key="HighlightedSquareButtonStyle" BasedOn="{StaticResource SquareButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource HighlightBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Control.Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidFocused" />
                <VisualState x:Name="InvalidUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Name="Background" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}" />
            <Rectangle Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" />
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource AccentColorBrush}" Property="Control.Background" />
              <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Value="{DynamicResource BlackBrush}" Property="Control.Background" />
              <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroCircleToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource MetroCircleButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush3}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <Ellipse Fill="{TemplateBinding Control.Background}" Margin="4" StrokeThickness="0" />
            <Ellipse Name="ellipsebg" Fill="{DynamicResource AccentColorBrush}" Opacity="0" Margin="4" StrokeThickness="0" />
            <Ellipse Name="ellipse" Margin="4" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness.Left}" />
            <ContentPresenter Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ellipsebg" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.3" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
              <Setter Value="{DynamicResource IdealForegroundColorBrush}" Property="Control.Foreground" />
              <Setter TargetName="ellipse" Value="{DynamicResource AccentColorBrush}" Property="Shape.Stroke" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.7" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource GrayBrush7}" Property="Control.Foreground" />
              <Setter TargetName="ellipse" Property="UIElement.Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="Controls:ControlsHelper.CornerRadius" Value="3" />
    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush10}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}" />
    <Setter Property="Control.FontSize" Value="{DynamicResource UpperCaseContentFontSize}" />
    <Setter Property="Control.FontWeight" Value="Bold" />
    <Setter Property="Control.Padding" Value="5,6" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.MinHeight" Value="25" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <Border Name="Background" Background="{TemplateBinding Control.Background}" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Border Name="Border" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{x:Null}" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Border Name="DisabledVisualElement" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="2" />
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush2}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush5}" Property="Border.BorderBrush" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ToggleButton.IsChecked" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush8}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ToggleButton.IsChecked" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush3}" Property="Border.Background" />
            </MultiTrigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Background" Value="{DynamicResource GrayBrush7}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="2" />
              <Setter TargetName="Border" Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="DisabledVisualElement" Property="UIElement.Opacity" Value="0.7" />
              <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SquareMetroButton" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="Control.Padding" Value="12,4,12,4" />
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left" />
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center" />
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFont}" />
    <Setter Property="Control.FontWeight" Value="SemiBold" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
              <Grid>
                <Rectangle Name="MouseOverRectangle" Fill="{DynamicResource WhiteBrush}" Opacity="0" />
                <Rectangle Name="PressedRectangle" Fill="{DynamicResource BlackBrush}" Opacity="0" />
                <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
              </Grid>
            </Border>
            <Rectangle Name="FocusVisualWhite" IsHitTestVisible="False" Stroke="#FFFFFFFF" StrokeEndLineCap="Square" StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="1.5" />
            <Rectangle Name="FocusVisualBlack" IsHitTestVisible="False" Stroke="#FF000000" StrokeEndLineCap="Square" StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="0.5" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroAccentButton" TargetType="{x:Type Button}" BasedOn="{StaticResource SquareMetroButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverRectangle" To="0.4" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedRectangle" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Border" To="0.5" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
              <Grid>
                <Rectangle Name="MouseOverRectangle" Fill="{DynamicResource BlackBrush}" Opacity="0" />
                <Rectangle Name="PressedRectangle" Fill="#FFFFFFFF" Opacity="0" />
                <Controls:ContentControlEx x:Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
              </Grid>
            </Border>
            <Rectangle Name="FocusVisualWhite" IsHitTestVisible="False" Stroke="#FFFFFFFF" StrokeEndLineCap="Square" StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="1.5" />
            <Rectangle Name="FocusVisualBlack" IsHitTestVisible="False" Stroke="#FF000000" StrokeEndLineCap="Square" StrokeDashArray="1,1" Opacity="0" StrokeDashOffset="0.5" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="Control.Foreground" Value="#FF000000" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonDropDownStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
    <Setter Property="Control.Background" Value="{DynamicResource WhiteColorBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackColorBrush}" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.Padding" Value="2" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Border" CornerRadius="0" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <ContentPresenter Name="PART_ContentPresenter" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="Border" Property="Border.BorderBrush" Value="#00FFFFFF" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush8}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush6}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush10}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonSplitStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonDropDownStyle}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="ButtonSplitArrowStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonSplitStyle}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
  </Style>
</ResourceDictionary>