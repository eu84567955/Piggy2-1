<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
  <ControlTemplate x:Key="WindowCommandsButtonTemplate" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Control.Background}">
      <Controls:ContentControlEx x:Name="PART_ContentControlEx" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" Opacity="0.5" ContentCharacterCasing="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentControlEx" Property="UIElement.Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="WindowCommandsToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
    <Grid Background="{TemplateBinding Control.Background}">
      <Controls:ContentControlEx x:Name="PART_ContentControlEx" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" Opacity="0.5" ContentCharacterCasing="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter TargetName="PART_ContentControlEx" Property="UIElement.Opacity" Value="0.8" />
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentControlEx" Property="UIElement.Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="WindowCommandsControlStyle" TargetType="{x:Type Control}">
    <Setter Property="Control.Foreground" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
    <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush4}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="LightWindowCommandsTemplate" TargetType="{x:Type Controls:WindowCommands}">
    <ItemsPresenter />
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource WindowCommandsControlStyle}">
          <Setter Property="Control.Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
        </Style>
        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource WindowCommandsControlStyle}">
          <Setter Property="Control.Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
        </Style>
      </ResourceDictionary>
    </ControlTemplate.Resources>
  </ControlTemplate>
  <ControlTemplate x:Key="DarkWindowCommandsTemplate" TargetType="{x:Type Controls:WindowCommands}">
    <ItemsPresenter />
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource WindowCommandsControlStyle}">
          <Setter Property="Control.Template" Value="{StaticResource WindowCommandsButtonTemplate}" />
          <Style.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="Control.Foreground" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
          </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource WindowCommandsControlStyle}">
          <Setter Property="Control.Template" Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
          <Style.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="Control.Foreground" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </ResourceDictionary>
    </ControlTemplate.Resources>
  </ControlTemplate>
  <Style x:Key="{x:Type Controls:WindowCommands}" TargetType="{x:Type Controls:WindowCommands}">
    <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Normal" />
    <Setter Property="Control.Template" Value="{StaticResource LightWindowCommandsTemplate}" />
    <Setter Property="Controls:WindowCommands.LightTemplate" Value="{StaticResource LightWindowCommandsTemplate}" />
    <Setter Property="Controls:WindowCommands.DarkTemplate" Value="{StaticResource DarkWindowCommandsTemplate}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ItemsControl.ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type Controls:WindowCommandsItem}">
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type Controls:WindowCommandsItem}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="{Binding HorizontalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" VerticalAlignment="{Binding VerticalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}">
                  <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="8,0,8,0" />
                  <Rectangle Name="PART_Separator" Width="1" IsHitTestVisible="False" SnapsToDevicePixels="True" UseLayoutRounding="True" Opacity="0.25" Height="{Binding SeparatorHeight, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" Fill="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
                </StackPanel>
                <ControlTemplate.Triggers>
                  <Trigger Property="Controls:WindowCommandsItem.IsSeparatorVisible" Value="False">
                    <Setter TargetName="PART_Separator" Property="UIElement.Visibility" Value="Collapsed" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding ParentWindow.ShowTitleBar, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="Control.Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>